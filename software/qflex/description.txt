qFlex: A flexible high-performance simulator for verifying and benchmarking quantum circuits implemented on real hardwarePublic location of the tool:https://github.com/ngnrsaa/qflex- Description (quoted from the above page):Flexible Quantum Circuit Simulator (qFlex) implements an efficient tensor network, CPU-based simulator of large quantum circuits. qFlex computes exact probability amplitudes, a task that proves essential for the verification of quantum hardware, as well as mimics quantum machines by computing amplitudes with low fidelity. qFlex targets quantum circuits in the range of sizes expected for supremacy experiments based on random quantum circuits, in order to verify and benchmark such experiments. - Method paper:A flexible high-performance simulator for verifying and benchmarking quantum circuits implemented on real hardwareBenjamin Villalonga, Sergio Boixo, Bron Nelson, Christopher Henze, Eleanor Rieffel, Rupak Biswas, Salvatore MandràPaper published on NPJ Quantum Informationhttps://arxiv.org/abs/1811.09599although it is focused mainly on benchmarks and tests. A better algorithmic description can be found in Establishing the Quantum Supremacy Frontier with a 281 Pflop/s SimulationBenjamin Villalonga, Dmitry Lyakh, Sergio Boixo, Hartmut Neven, Travis S. Humble, Rupak Biswas, Eleanor G. Rieffel, Alan Ho, Salvatore Mandràhttps://arxiv.org/abs/1905.00444Other project where the code is (presumably) used:Quantum supremacy using a programmable superconducting processorFrank Arute, Kunal Arya, Ryan Babbush, Dave Bacon, Joseph C. Bardin, Rami Barends, Rupak Biswas, Sergio Boixo, Fernando G. S. L. Brandao, David A. Buell, Brian Burkett, Yu Chen, Zijun Chen, Ben Chiaro, Roberto Collins, William Courtney, Andrew Dunsworth, Edward Farhi, Brooks Foxen, Austin Fowler, Craig Gidney, Marissa Giustina, Rob Graff, Keith Guerin, Steve Habegger, Matthew P. Harrigan, Michael J. Hartmann, Alan Ho, Markus Hoffmann, Trent Huang, Travis S. Humble, Sergei V. Isakov, Evan Jeffrey, Zhang Jiang, Dvir Kafri, Kostyantyn Kechedzhi, Julian Kelly, Paul V. Klimov, Sergey Knysh, Alexander Korotkov, Fedor Kostritsa, David Landhuis, Mike Lindmark, Erik Lucero, Dmitry Lyakh, Salvatore Mandrà, Jarrod R. McClean, Matthew McEwen, Anthony Megrant, Xiao Mi, Kristel Michielsen, Masoud Mohseni, Josh Mutus, Ofer Naaman, Matthew Neeley, Charles Neill, Murphy Yuezhen Niu, Eric Ostby, Andre Petukhov, John C. Platt, Chris Quintana, Eleanor G. Rieffel, Pedram Roushan, Nicholas C. Rubin, Daniel Sank, Kevin J. Satzinger, Vadim Smelyanskiy, Kevin J. Sung, Matthew D. Trevithick, Amit Vainsencher, Benjamin Villalonga, Theodore White, Z. Jamie Yao, Ping Yeh, Adam Zalcman, Hartmut Neven & John M. MartinisNature 574, 505–510 (2019)https://www.nature.com/articles/s41586-019-1666-5Here I am confused: are they really using qFlex or something different? If they use it, they don’t mention explicitly; rather they speak about “Schrödinger” and  “hybrid Schrödinger–Feynman algorithm” with other references.- details on how they are coded (language, parallelisation):in Villalonga et al. 2019. qFlex is enabled to run efficiently on GPUs with extensive optimisation. It is parallelised using MPI and CUDA. This sounds to me at odds with the GitHub description, which speaks only about CPUs. Probably this explains because in the GitHub repository, besides the CPU-based master branch, there is a GPU-specific branch. TAL-SH is used as library within qFlex, but with improvements with respect to the standalone version. The custom memory allocation in TAL-SH  is crucial for achieving performance on accelerated systems. This is even better than the CUDA malloc. Other key of TAL-SH: asynchronous (with respect to CPU) execution of tensor operation on any GPUs. Communication and computation overlap is very efficient!The most important extension of basic TAL-SH in qFlex is the algorithm to execute tensor contraction that don’t fit in the individual GPU memory. It does not rely on the unified memory abstraction via NVLink available on Summit, also to ensure portability on other accelerated systems.- performance / scaling results available on Villalonga et al. 2019.They simulate random circuit sampling, on quantum systems up to 121 qubits on Summit. They have nearly ideal strong scaling (mentioned, not shown) and reach a sustained performance of about 70% of peak (see the paper for the definitions).Final, general question: the size of the problem that can be solved in qFlex is impressive, with respect to what can be done with other classes of simulators, like Intel-QS. I can imagine that, in turn, the latter tool offers advantages in some features, with respect to tensor network contraction. Can we elaborate a bit the difference?