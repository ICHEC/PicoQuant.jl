QUIMB

- Public location of the tool:
https://github.com/jcmgray/quimb


- Description:
quimb is a pure python library for quantum information and many-body calculations. The submodule quimb.tensor has specialised tools for tensor networks. The main developer is Johnnie Gray.

- Documentation and Examples:
https://quimb.readthedocs.io/en/latest/

- Some details:
	- It stores tensor data with numpy arrays together with a list of index labels
	- It uses a geometry free representation of tensor networks (no adjacency matrix).
	- Uses opt_einsum to find efficient contraction orders for thousands of tensors
	- Can use numpy, scipy, lobpcg or slepc4py for distributed linear algebra.
	- Accelerates and parallelizes many operations using numba.
	- Can optimize any tensor network with tensorflow, pytorch, jax or autograd.
	Meaning, for example, you can create a random MPS and a target state and use
	optimisers from the mentioned libraries to maximise the squared overlap by 
	tuning parameters of the MPS.

Quimb uses the library opt_einsum to perform tensor contractions. opt_einsum is agnostic to the backend and can handle NumPy, Dask, PyTorch, Tensorflow, CuPy, Sparse, Theano, JAX, and Autograd arrays as well as potentially any library which conforms to a standard API.

- Quantum circuits
One of the more relevant classes for us is the circuit class in quimb.tensor for simulating quantum circuits. This class has a tensor network, representing the output state of a circuit, as an attribute. One can apply gates to the state using the apply_gate method which adds the tensor, representing the gate, to the tensor network (contracting it into the network is optional). Circuit also has a from_qasm class method which returns a circuit object built from a qasm description of a circuit, similar to what we'd like for layer 3. I think this method only works with a more primitive version of qasm however and won't work with a general OpenQASM description.
